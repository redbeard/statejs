function Mimic(){this.mimics=[];
this.verifiers=[];
this.logs=[];
this.jQuery=null;
this._value=null;
this.register=function(log,verifier){this.logs.push(log);
this.verifiers.push(verifier);
};
this.reset=function(){for(var i=0;
i<this.logs.length;
i++){this.logs[i].empty();
}if(this.jQuery!=null){this.jQuery._reset();
}};
this.clear=function(){this.mimics=[];
};
this.verify=function(){for(var i=0;
i<this.verifiers.length;
i++){this.verifiers[i].verify();
}if(this.jQuery!=null){Mimic.Verifier.JQuery(this.jQuery);
}};
this.isMimic=function(mimic){if(mimic._activeExpectations!=null){return true;
}return false;
};
}Mimic=new Mimic();
function mimic(object,asPartial){var mimic;
if(object.fn&&object.fn.jquery){mimic=Mimic.Object.JQuery;
Mimic.jQuery=mimic();
return mimic;
}else{if(!Mimic.isMimic(object)){Mimic.Instrument(object,asPartial);
Mimic.mimics.push(object);
}return object;
}}Mimic.Language={inject:function(mimic){if(mimic==undefined){throw ("An object to be injected must be provided");
}Mimic.Language._mimic=mimic;
return Mimic.Language;
},into:function(object){if(object==undefined){throw ("Cannot inject object into an object which has not been provided");
}this._object=object;
return this;
},as:function(name){if(name==null||name==""||typeof name!="string"){throw ("Cannot inject object when a name is not provided");
}this._object[name]=this._mimic;
this._object=null;
this._mimic=null;
},that:function(value){Mimic.Language._value=value;
return Mimic.Language;
},equals:function(value){if(this._value!=value&&!Mimic.Util.Object.equals(this._value,value)){throw ('The value "'+this._value+'" was expected to equal "'+value+'", but does not.');
}this._value=null;
}};
function times(){}function time(){}function anything(){}function never(){}window.given=window;
window.when=window;
window.then=window;
window.and=window;
window.it=window;
window.that=Mimic.Language.that;
window.inject=Mimic.Language.inject;
window.expect=Screw.Matchers.expect;
window.should={alert:function(msg){message=msg;
return window;
},pass:function(){},say:function(exception){thrown=exception;
return window;
}};
window.realAlert=window.alert;
window.alert=function(actualMessage){if(message!=undefined&&message!=null){Screw.Matchers.expect(actualMessage).to(Screw.Matchers.equal,message);
}else{realAlert(actualMessage);
}};
var thrown,message;
var asPartial=true;
Mimic.Log=function(calls,expectations){this.calls=calls;
this.expectations=expectations;
this.empty=function(){this.calls.empty();
this.expectations.empty();
};
};
Screw.Specifications.itOriginal=Screw.Specifications.it;
Screw.Specifications.it=function(name,fnOriginal){Screw.Specifications.itOriginal(name,function(){try{fnOriginal();
Mimic.verify();
Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
throw ("An exception was expected to be thrown but was not. The exception expected is:<br/><br/>"+expected);
}}catch(exception){Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
Screw.Matchers.expect(exception).to(Screw.Matchers.equal,expected);
}else{throw (exception);
}}});
};
jQuery.fn.text=function(text){return this.html(text);
};
Mimic.Util={};
Mimic.Util.Array={contains:function(array1,array2){if(array1==null||array2==null){return false;
}for(var i=0;
i<array1.length;
i++){if(Mimic.Util.Object.equals(array1[i],array2)==true){return i;
}}return false;
},position:function(array,value){for(var i=0;
i<array.length;
i++){if(array[i]==value){return i;
}}return -1;
},clean:function(array){var clean=[];
for(var i=0;
i<array.length;
i++){if(array[i]!=null){clean.push(array[i]);
}}return clean;
}};
Mimic.Util.Object={equals:function(object1,object2,parents){if(parents==null){parents=[];
}parents.push(object1);
if(typeof object1=="number"&&isNaN(object1)&&typeof object2=="number"&&isNaN(object2)){return true;
}if(typeof object1=="object"&&object1==null&&typeof object2=="object"&&object2==null){return true;
}if(typeof object1=="undefined"&&object1==undefined&&typeof object2=="undefined"&&object2==undefined){return true;
}if(object1==null||object2==null){return false;
}for(var i in object1){if(object1==object1[i]&&typeof object1==typeof object1[i]){continue;
}var position=Mimic.Util.Array.position(parents,object1[i]);
if(position!=-1){if(object1[i]!=object2[i]){return false;
}}else{if(typeof object1[i]!=typeof object2[i]){return false;
}else{if(typeof object1[i]=="object"||typeof object1[i]=="function"||isNaN(object1[i])){if(this.equals(object1[i],object2[i],parents)==false){return false;
}}else{if(object1[i]!=object2[i]){return false;
}}}}}if(typeof object1==typeof object2&&typeof object1!="object"&&typeof object1!="function"&&object1!=object2){return false;
}return true;
},toString:function(object,withKey){var string=[];
for(var key in object){if(object[key]==null){string.push("null");
}else{if(typeof object[key]=="object"){if(object[key].join!=null){string.push("["+this.toString(object[key])+"]");
}else{string.push("{"+this.toString(object[key],true)+"}");
}}else{if(typeof object[key]=="string"){if(withKey==true){string.push('"'+key+'": "'+object[key]+'"');
}else{string.push('"'+object[key]+'"');
}}else{string.push(object[key]);
}}}}return string.join(", ");
},clone:function(object,parents){var newObject=(object instanceof Array)?[]:{};
if(parents==null){parents=[];
}parents.push(object);
if(typeof object!="object"){return object;
}for(var key in object){var position=Mimic.Util.Array.position(parents,object[key]);
if(position!=-1){newObject[key]=parents[position];
}else{if(object[key]&&typeof object[key]=="object"){newObject[key]=Mimic.Util.Object.clone(object[key],parents);
}else{newObject[key]=object[key];
}}}return newObject;
}};
Mimic.Util.Parameters={evaluate:function(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9){var parameters=[];
for(var i=0;
i<10;
i++){var evaluated=eval("arg"+i);
if(typeof evaluated!="undefined"){if(evaluated==null){parameters.push(evaluated);
}else{parameters.push(Mimic.Util.Object.clone(evaluated));
}}}return parameters;
},arguments:function(theFunction){return theFunction.toString().replace(/ /g,"").split("(")[1].split(")")[0];
}};
Mimic.Verifier=function(verifier){this.verifier=verifier;
this.verify=function(){this.verifier.verify();
};
};
Mimic.Calls=function(){this.calls=[];
this.add=function(call){this.calls.push(call);
};
this.empty=function(){this.calls=[];
};
this.withName=function(mimic,name){var calls=[];
for(var i=0;
i<this.calls.length;
i++){if(this.calls[i].isValidMimic(mimic)&&this.calls[i].hasName(name)){calls.push(this.calls[i]);
}}return calls;
};
this.nextWithParameters=function(mimic,parameters){for(var i=0;
i<this.calls.length;
i++){if(this.calls[i].isValidMimic(mimic)&&Mimic.Util.Object.equals(parameters,this.calls[i].parameters)&&this.calls[i].checked==false){return this.calls[i];
}}return null;
};
};
Mimic.Call=function(mimic,name,parameters){this.mimic=mimic;
this.name=name;
this.parameters=parameters;
this.checked=false;
this.isValidMimic=function(mimic){if(this.mimic==mimic||this.mimic._parentMimic==mimic){return true;
}return false;
};
this.hasName=function(name){return(this.name==name||(this.mimic._callPrefix+"."+this.name)==name);
};
};
Mimic.Expectations=function(){this.expectations=[];
this.add=function(expectation){for(var i in this.expectations){if(this.expectations[i].name==expectation.name&&this.expectations[i].callExpected!=expectation.callExpected){this.expectations[i]=null;
}}this.expectations=Mimic.Util.Array.clean(this.expectations);
this.expectations.push(expectation);
};
this.returnFor=function(name,parameters){for(var i in this.expectations){if(this.expectations[i].name==name&&Mimic.Util.Object.equals(this.expectations[i].parameters,parameters)){return this.expectations[i].returns;
}}};
this.copy=function(expectationToCopy){var expectation=new Mimic.Expectation(expectationToCopy.mimic,expectationToCopy.name,expectationToCopy.callExpected,expectationToCopy.parameterCount);
expectation.unlimited=expectationToCopy.unlimited;
expectation.parameters=Mimic.Util.Object.clone(expectationToCopy.parameters);
expectation.returns=expectationToCopy.returns;
expectation.throwz=expectationToCopy.throwz;
return expectation;
};
this.countFor=function(name){var expectedCount=0;
for(var i=0;
i<this.expectations.length;
i++){if(this.expectations[i].unlimited==false){if(expectedCount==-1){expectedCount=0;
}expectedCount++;
}else{expectedCount=-1;
}}return expectedCount;
};
this.failedParametersFrom=function(calls){var failedExpectations=[];
for(var i=0;
i<this.expectations.length;
i++){var call=calls.nextWithParameters(this.expectations[i].mimic,this.expectations[i].parameters);
if(call!=null){call.checked=true;
}else{failedExpectations.push(this.expectations[i]);
}}return failedExpectations;
};
this.empty=function(){this.expectations=[];
};
};
Mimic.Expectation=function(mimic,name,callExpected,parameterCount){this.mimic=mimic;
this.name=name;
this.callExpected=callExpected;
this.parameterCount=parameterCount;
this.unlimited=false;
this.parameters=[];
this.returns=null;
this.throwz=null;
};
Mimic.Instrument=function(object,asPartial,parentMimic,callPrefix){for(var member in object){var callString=member;
if(callPrefix!=null){callString=callPrefix+"."+callString;
}if(typeof object[member]=="function"){var instrumentedFunction="object."+member+" = function("+Mimic.Util.Parameters.arguments(object[member])+') {     Mimic.Log.Default.calls.add(new Mimic.Call(this, "'+member+'", Mimic.Util.Parameters.evaluate('+Mimic.Util.Parameters.arguments(object[member])+')));    if (Mimic.Log.Default.expectations.returnFor("'+member+'", Mimic.Util.Array.clean(['+Mimic.Util.Parameters.arguments(object[member])+'])) != null) {     	return Mimic.Log.Default.expectations.returnFor("'+member+'", Mimic.Util.Array.clean(['+Mimic.Util.Parameters.arguments(object[member])+"]));    } else {";
if(asPartial==true){instrumentedFunction+=" return ("+object[member].toString()+")("+Mimic.Util.Parameters.arguments(object[member])+");";
}instrumentedFunction+=" } }";
eval(instrumentedFunction);
}else{if(typeof object[member]=="object"&&object[member]!=null&&object[member].join==null){Mimic.Instrument(object[member],asPartial,object,callString);
}}}object._activeExpectations=[];
for(var member in Mimic.Language.Default){var languageFunction=[];
if(typeof Mimic.Language.Default[member]=="function"){var functionString=eval("Mimic.Language.Default."+member+".toString()");
languageFunction.push("object.");
languageFunction.push(member);
languageFunction.push(" = ");
languageFunction.push(functionString);
languageFunction.push(";");
eval(languageFunction.join(""));
}}if(parentMimic!=null){object._parentMimic=parentMimic;
}if(callPrefix!=null){object._callPrefix=callPrefix;
}};
Mimic.Language.Default={_activeExpectations:[],should:function(callString,ignoreArg){if(ignoreArg!=undefined){throw ('Only one parameter can be provided for <b>should()</b>. To provide extra parameters try the following:<br/><p><b>should("'+callString+'").using('+ignoreArg+", ...)</b></p>");
}var parameterCount=0;
var theFunction=eval("this."+callString);
if(theFunction!=null){var parameters=Mimic.Util.Parameters.arguments(theFunction);
if(parameters!=""){parameterCount=parameters.split(",").length;
}}var expectation=new Mimic.Expectation(this,callString,true,parameterCount);
expectation.unlimited=true;
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations=[];
this._activeExpectations.push(expectation);
return this;
},shouldNot:function(callString){var parameterCount=0;
var theFunction=eval("this."+callString);
if(theFunction!=null){var parameters=Mimic.Util.Parameters.arguments(theFunction);
if(parameters!=""){parameterCount=parameters.split(",").length;
}}var expectation=new Mimic.Expectation(this,callString,false,parameterCount);
expectation.unlimited=true;
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations=[];
this._activeExpectations.push(expectation);
return this;
},once:function(){if(this._activeExpectations.length==0){throw ('The function "once" can only be used when the function "should" precedes it');
}return this.exactly(1,time);
},twice:function(){if(this._activeExpectations.length==0){throw ('The function "twice" can only be used when the function "should" precedes it');
}return this.exactly(2,times);
},exactly:function(callCount,times){if(typeof callCount!="number"){throw ("A number must be provided when specifying the number of occurrences");
}if(this._activeExpectations.length==0){throw ('The function "exactly" can only be used when the function "should" precedes it');
}this._activeExpectations[0].unlimited=false;
for(var i=0;
i<callCount-1;
i++){var expectation=Mimic.Log.Default.expectations.copy(this._activeExpectations[0]);
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations.push(expectation);
}return this;
},andReturn:function(value){if(this._activeExpectations.length==0){throw ('The function "andReturn" can only be used when the function "should" precedes it');
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].returns=value;
}},andThrow:function(value){if(this._activeExpectations.length==0){throw ('The function "andThrow" can only be used when the function "should" precedes it');
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].throwz=value;
}},using:function(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9){if(this._activeExpectations.length==0){throw ('The function "using" can only be used when the function "should" precedes it');
}if(arg0==anything){return;
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].parameters=Mimic.Util.Parameters.evaluate(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}return this;
}};
Mimic.Verifier.Default={verify:function(){var expectations=Mimic.Log.Default.expectations;
var calls=Mimic.Log.Default.calls;
for(var i=0;
i<Mimic.Log.Default.expectations.expectations.length;
i++){var expectation=Mimic.Log.Default.expectations.expectations[i];
if(eval("expectation.mimic."+expectation.name)==null){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> does not exist, however it is referenced in the specification");
}if(expectation.throwz){throw (expectation.throwz);
}var callCount=calls.withName(expectation.mimic,expectation.name).length;
if(expectation.callExpected==false){if(callCount>0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> was called, but was not expected to be called");
}}else{if(callCount==0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> was expected but did not get called!");
}}var expectedCount=expectations.countFor(expectation.name);
if(expectedCount!=-1&&expectedCount!=callCount){throw ("Your specification did not pass!<br/><p>The specification executed <b>"+expectation.name+"() "+callCount+"</b> times, however the specification expected <b>"+expectation.name+"()</b> to be executed <b>"+expectedCount+"</b> times");
}if(expectation.parameters.length>0&&expectation.parameterCount==0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> does not accept any parameters. You must remove the parameters from the specification <b>"+expectation.name+"()</b>");
}else{if(expectation.parameters.length>expectation.parameters.slice(0,expectation.parameterCount).length){throw ("Your specification did not pass!<br/><p>The specification executed <b>"+expectation.name+"()</b> with <b>"+expectation.parameters.length+"</b> parameters, however the specification expected <b>"+expectation.name+"()</b> with <b>"+expectation.parameters.slice(0,expectation.parameterCount).length+"</b> parameters");
}}}var failedExpectations=expectations.failedParametersFrom(calls);
var message=[];
for(var i=0;
i<failedExpectations.length;
i++){if(message.length==0){message.push("Your specification did not pass!<br/><p>The specification expected <b>"+failedExpectations[i].name+"("+Mimic.Util.Object.toString(failedExpectations[i].parameters)+")</b>");
}else{message.push(" or <b>"+failedExpectations[i].name+"("+Mimic.Util.Object.toString(failedExpectations[i].parameters)+")</b>");
}}if(message.length>0){message.push("</p>");
throw (message.join(""));
}}};
Mimic.Call.JQuery=function(selector,context,call){this.selector=selector;
this.context=context;
this.call=call;
this.set=function(name,value){this.call={name:name,value:value};
};
};
Mimic.Expectations.JQuery=function(){this.expectations=[];
this.add=function(selector,context){var expectation=new Mimic.Expectation.JQuery(selector,context);
this.expectations.push(expectation);
return expectation;
};
};
Mimic.Expectation.JQuery=function(selector,context){this.selector=selector;
this.context=context;
this.functions=[];
this.neverBeCalled=false;
this.neverHappens=function(){this.neverBeCalled=true;
};
this.should=function(name){return this.and(name);
};
this.and=function(name){this.functions.push({name:name,value:[]});
return this;
};
this.using=function(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9){this.functions[this.functions.length-1].value=Mimic.Util.Parameters.evaluate(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
return this;
};
this.hasFailedSelectorFrom=function(calls){if(this.selector==null){return false;
}for(var i=0;
i<calls.length;
i++){if(this.selector==calls[i].selector){if(this.neverBeCalled==true){return{call:calls[i],never:true};
}else{return false;
}}}if(this.neverBeCalled==true){return false;
}return true;
};
this.hasFailedExpectationsFrom=function(calls){var failedExpectations=[];
var expectationMet,brokenCall;
for(var i=0;
i<this.functions.length;
i++){expectationMet=false;
brokenCall=null;
for(var j=0;
j<calls.length;
j++){if(calls[j].call!=null){if(Mimic.Util.Object.equals(this.functions[i],calls[j].call)){expectationMet=true;
}else{if(this.functions[i].name==calls[j].call.name){if(!Mimic.Util.Object.equals(this.functions[i].value,calls[j].call.value)){brokenCall=calls[j].call;
}}}}}if(expectationMet==false){failedExpectations.push({expectation:this.functions[i],call:brokenCall});
}}return failedExpectations;
};
};
Mimic.Object={};
Mimic.Object.JQuery=function(selector,context){return _jQueryMimic.mimicInit(selector,context);
};
Mimic.JQuery=function(){this._called=[];
this._expect=new Mimic.Expectations.JQuery();
this.mimicInit=function(selector,context){if(selector!=null&&typeof selector=="string"){var call=new Mimic.Call.JQuery(selector,context);
this._called.push(call);
}selector=selector||document;
if(selector.nodeType){Mimic.Object.JQuery.clean();
this[0]=selector;
this.length=1;
return this;
}if(typeof selector=="string"){var match=quickExpr.exec(selector);
if(match&&(match[1]||!context)){if(match[1]){selector=originalJQuery.clean([match[1]],context);
}else{var elem=document.getElementById(match[3]);
if(elem){if(elem.id!=match[3]){return this.mimicInit()._find(selector);
}return this.mimicInit(elem);
}selector=[];
}}else{return this.mimicInit(context)._find(selector);
}}else{if(originalJQuery.isFunction(selector)){return this.mimicInit(document)[originalJQuery.fn.ready?"ready":"load"](selector);
}}Mimic.Object.JQuery.clean();
return Mimic.Object.JQuery.setArray(originalJQuery.makeArray(selector));
};
this.create=function(){this._inject(jQuery);
this._inject(jQuery.fn);
return this;
};
this.usingSelector=function(selector,context){return this._expect.add(selector,context);
};
this._find=function(selector){return Mimic.Object.JQuery.find(selector);
};
this._inject=function(object){for(var member in object){if(typeof object[member]=="function"){var theFunction="this."+member+' = function(arg0, arg1, arg2, arg3, arg4) {     var call = new Mimic.Call.JQuery(); 	 call.set("'+member+'", Mimic.Util.Parameters.evaluate(arg0, arg1, arg2, arg3, arg4));	 this._called.push(call);    return this;}';
eval(theFunction);
}else{eval("this."+member+" =  object[member];");
}}};
this._reset=function(){this._called=[];
this._expect=new Mimic.Expectations.JQuery();
};
};
var _jQueryMimic=new Mimic.JQuery().create();
var originalJQuery=jQuery;
var chars=originalJQuery.browser.safari&&parseInt(originalJQuery.browser.version)<417?"(?:[\\w*_-]|\\\\.)":"(?:[\\w\u0128-\uFFFF*_-]|\\\\.)",quickChild=new RegExp("^>\\s*("+chars+"+)"),quickID=new RegExp("^("+chars+"+)(#)("+chars+"+)"),quickClass=new RegExp("^([#.]?)("+chars+"*)");
var quickExpr=/^[^<]*(<(.|\s)+>)[^>]*$|^#(\w+)$/;
Mimic.Object.JQuery.find=function(selector){var elems=originalJQuery.map(_jQueryMimic,function(elem){return Mimic.Object.JQuery.findElements(selector,elem);
});
return Mimic.Object.JQuery.pushStack(/[^+>] [^+>]/.test(selector)||selector.indexOf("..")>-1?originalJQuery.unique(elems):elems);
};
Mimic.Object.JQuery.pushStack=function(elems){var ret=_jQueryMimic.mimicInit(elems);
ret.prevObject=_jQueryMimic;
return ret;
};
Mimic.Object.JQuery.setArray=function(elems){_jQueryMimic.length=0;
Array.prototype.push.apply(_jQueryMimic,elems);
return _jQueryMimic;
};
Mimic.Object.JQuery.findElements=function(t,context){if(typeof t!="string"){return[t];
}if(context&&context.nodeType!=1&&context.nodeType!=9){return[];
}context=context||document;
var ret=[context],done=[],last,nodeName;
while(t&&last!=t){var r=[];
last=t;
t=originalJQuery.trim(t);
var foundToken=false,re=quickChild,m=re.exec(t);
if(m){nodeName=m[1].toUpperCase();
for(var i=0;
ret[i];
i++){for(var c=ret[i].firstChild;
c;
c=c.nextSibling){if(c.nodeType==1&&(nodeName=="*"||c.nodeName.toUpperCase()==nodeName)){r.push(c);
}}}ret=r;
t=t.replace(re,"");
if(t.indexOf(" ")==0){continue;
}foundToken=true;
}else{re=/^([>+~])\s*(\w*)/i;
if((m=re.exec(t))!=null){r=[];
var merge={};
nodeName=m[2].toUpperCase();
m=m[1];
for(var j=0,rl=ret.length;
j<rl;
j++){var n=m=="~"||m=="+"?ret[j].nextSibling:ret[j].firstChild;
for(;
n;
n=n.nextSibling){if(n.nodeType==1){var id=originalJQuery.data(n);
if(m=="~"&&merge[id]){break;
}if(!nodeName||n.nodeName.toUpperCase()==nodeName){if(m=="~"){merge[id]=true;
}r.push(n);
}if(m=="+"){break;
}}}}ret=r;
t=originalJQuery.trim(t.replace(re,""));
foundToken=true;
}}if(t&&!foundToken){if(!t.indexOf(",")){if(context==ret[0]){ret.shift();
}done=originalJQuery.merge(done,ret);
r=ret=[context];
t=" "+t.substr(1,t.length);
}else{var re2=quickID;
var m=re2.exec(t);
if(m){m=[0,m[2],m[3],m[1]];
}else{re2=quickClass;
m=re2.exec(t);
}m[2]=m[2].replace(/\\/g,"");
var elem=ret[ret.length-1];
if(m[1]=="#"&&elem&&elem.getElementById&&!originalJQuery.isXMLDoc(elem)){var oid=elem.getElementById(m[2]);
if((originalJQuery.browser.msie||originalJQuery.browser.opera)&&oid&&typeof oid.id=="string"&&oid.id!=m[2]){oid=jQuery('[@id="'+m[2]+'"]',elem)[0];
}ret=r=oid&&(!m[3]||originalJQuery.nodeName(oid,m[3]))?[oid]:[];
}else{for(var i=0;
ret[i];
i++){var tag=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];
if(tag=="*"&&ret[i].nodeName.toLowerCase()=="object"){tag="param";
}r=originalJQuery.merge(r,ret[i].getElementsByTagName(tag));
}if(m[1]=="."){r=originalJQuery.classFilter(r,m[2]);
}if(m[1]=="#"){var tmp=[];
for(var i=0;
r[i];
i++){if(r[i].getAttribute("id")==m[2]){tmp=[r[i]];
break;
}}r=tmp;
}ret=r;
}t=t.replace(re2,"");
}}if(t){var val=originalJQuery.filter(t,r);
ret=r=val.r;
t=originalJQuery.trim(val.t);
}}if(t){ret=[];
}if(ret&&context==ret[0]){ret.shift();
}done=originalJQuery.merge(done,ret);
return done;
};
Mimic.Object.JQuery.clean=function(){for(var i=0;
_jQueryMimic[i]!=undefined;
i++){delete _jQueryMimic[i];
}};
Mimic.Verifier.JQuery=function(mimic){var calls=mimic._called;
for(var i in mimic._expect.expectations){var expectation=mimic._expect.expectations[i];
var failedSelector=expectation.hasFailedSelectorFrom(calls);
if(failedSelector!=false){if(failedSelector.never==true){throw ('Your specification did not pass!<br/><p>The selector "<b>'+expectation.selector+'</b>" was expected to never be used, however it was!');
}else{throw ('Your specification did not pass!<br/><p>The selector "<b>'+expectation.selector+'</b>" was expected but was not used!');
}}var failedExpectations=expectation.hasFailedExpectationsFrom(calls);
if(failedExpectations.length>0){if(failedExpectations[0].call==null){throw ("Your specification did not pass!<br/><p>The function <b>"+failedExpectations[0].expectation.name+"()</b> was expected but did not get called!");
}else{if(failedExpectations[0].expectation.name==failedExpectations[0].call.name){throw ("Your specification did not pass!<br/><p>The function <b>"+failedExpectations[0].expectation.name+"()</b> was expected to be called with <b>("+Mimic.Util.Object.toString(failedExpectations[0].expectation.value)+")</b> but was called with <b>("+Mimic.Util.Object.toString(failedExpectations[0].call.value)+")</b>");
}}}}};
Mimic.Log.Default=new Mimic.Log(new Mimic.Calls(),new Mimic.Expectations());
Mimic.register(Mimic.Log.Default,new Mimic.Verifier(Mimic.Verifier.Default));
